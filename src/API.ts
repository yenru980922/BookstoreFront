/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * BackendForFrontend
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export interface WeatherForecast {
  date?: string;
  summary?: string | null;
  temperatureC?: number;
  readonly temperatureF?: number;
}

export interface UsedBookDto {
  authors?: string[] | null;
  bookStatus?: string | null;
  categoryId?: number;
  description?: string | null;
  id?: number;
  identifier?: string | null;
  kind?: string | null;
  memberEmail?: string | null;
  memberId?: number;
  picture?: string | null;
  price?: number;
  productStatus?: boolean;
  publishedDate?: string | null;
  publisher?: string | null;
  title?: string | null;
}

axios.defaults.baseURL="https://localhost:7236";

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



export const getApiUsedBooksIsbnIsbn = (
    isbn: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsedBookDto>> => {
    
    return axios.get(
      `/api/UsedBooks/isbn/${isbn}`,options
    );
  }


export const getGetApiUsedBooksIsbnIsbnQueryKey = (isbn: string,) => {
    return [`/api/UsedBooks/isbn/${isbn}`] as const;
    }

    
export const getGetApiUsedBooksIsbnIsbnQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>, TError = AxiosError<unknown>>(isbn: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsedBooksIsbnIsbnQueryKey(isbn);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>> = ({ signal }) => getApiUsedBooksIsbnIsbn(isbn, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(isbn), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsedBooksIsbnIsbnQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>>
export type GetApiUsedBooksIsbnIsbnQueryError = AxiosError<unknown>

export const useGetApiUsedBooksIsbnIsbn = <TData = Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>, TError = AxiosError<unknown>>(
 isbn: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiUsedBooksIsbnIsbnQueryOptions(isbn,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiUsedBooks = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsedBookDto[]>> => {
    
    return axios.get(
      `/api/UsedBooks`,options
    );
  }


export const getGetApiUsedBooksQueryKey = () => {
    return [`/api/UsedBooks`] as const;
    }

    
export const getGetApiUsedBooksQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsedBooks>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooks>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsedBooksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsedBooks>>> = ({ signal }) => getApiUsedBooks({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooks>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsedBooksQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsedBooks>>>
export type GetApiUsedBooksQueryError = AxiosError<unknown>

export const useGetApiUsedBooks = <TData = Awaited<ReturnType<typeof getApiUsedBooks>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooks>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiUsedBooksQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiUsedBooks = (
    usedBookDto: UsedBookDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsedBookDto>> => {
    
    return axios.post(
      `/api/UsedBooks`,
      usedBookDto,options
    );
  }



export const getPostApiUsedBooksMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsedBooks>>, TError,{data: UsedBookDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiUsedBooks>>, TError,{data: UsedBookDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUsedBooks>>, {data: UsedBookDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiUsedBooks(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiUsedBooksMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsedBooks>>>
    export type PostApiUsedBooksMutationBody = UsedBookDto
    export type PostApiUsedBooksMutationError = AxiosError<unknown>

    export const usePostApiUsedBooks = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsedBooks>>, TError,{data: UsedBookDto}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPostApiUsedBooksMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiUsedBooksId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsedBookDto>> => {
    
    return axios.get(
      `/api/UsedBooks/${id}`,options
    );
  }


export const getGetApiUsedBooksIdQueryKey = (id: number,) => {
    return [`/api/UsedBooks/${id}`] as const;
    }

    
export const getGetApiUsedBooksIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsedBooksId>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsedBooksIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsedBooksId>>> = ({ signal }) => getApiUsedBooksId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsedBooksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsedBooksId>>>
export type GetApiUsedBooksIdQueryError = AxiosError<unknown>

export const useGetApiUsedBooksId = <TData = Awaited<ReturnType<typeof getApiUsedBooksId>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiUsedBooksIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiUsedBooksId = (
    id: number,
    usedBookDto: UsedBookDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `/api/UsedBooks/${id}`,
      usedBookDto,options
    );
  }



export const getPutApiUsedBooksIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsedBooksId>>, TError,{id: number;data: UsedBookDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiUsedBooksId>>, TError,{id: number;data: UsedBookDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUsedBooksId>>, {id: number;data: UsedBookDto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiUsedBooksId(id,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiUsedBooksIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsedBooksId>>>
    export type PutApiUsedBooksIdMutationBody = UsedBookDto
    export type PutApiUsedBooksIdMutationError = AxiosError<unknown>

    export const usePutApiUsedBooksId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsedBooksId>>, TError,{id: number;data: UsedBookDto}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPutApiUsedBooksIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const patchApiUsedBooksId = (
    id: number,
    boolean: boolean, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.patch(
      `/api/UsedBooks/${id}`,
      boolean,options
    );
  }



export const getPatchApiUsedBooksIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsedBooksId>>, TError,{id: number;data: boolean}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiUsedBooksId>>, TError,{id: number;data: boolean}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiUsedBooksId>>, {id: number;data: boolean}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiUsedBooksId(id,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PatchApiUsedBooksIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiUsedBooksId>>>
    export type PatchApiUsedBooksIdMutationBody = boolean
    export type PatchApiUsedBooksIdMutationError = AxiosError<unknown>

    export const usePatchApiUsedBooksId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsedBooksId>>, TError,{id: number;data: boolean}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPatchApiUsedBooksIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiUsedBooksId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/UsedBooks/${id}`,options
    );
  }



export const getDeleteApiUsedBooksIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsedBooksId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsedBooksId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUsedBooksId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiUsedBooksId(id,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUsedBooksIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUsedBooksId>>>
    
    export type DeleteApiUsedBooksIdMutationError = AxiosError<unknown>

    export const useDeleteApiUsedBooksId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsedBooksId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getDeleteApiUsedBooksIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getWeatherForecast = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WeatherForecast[]>> => {
    
    return axios.get(
      `/WeatherForecast`,options
    );
  }


export const getGetWeatherForecastQueryKey = () => {
    return [`/WeatherForecast`] as const;
    }

    
export const getGetWeatherForecastQueryOptions = <TData = Awaited<ReturnType<typeof getWeatherForecast>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWeatherForecastQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeatherForecast>>> = ({ signal }) => getWeatherForecast({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWeatherForecastQueryResult = NonNullable<Awaited<ReturnType<typeof getWeatherForecast>>>
export type GetWeatherForecastQueryError = AxiosError<unknown>

export const useGetWeatherForecast = <TData = Awaited<ReturnType<typeof getWeatherForecast>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetWeatherForecastQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




