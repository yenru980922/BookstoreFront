/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * BackendForFrontend
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
axios.defaults.baseURL="https://localhost:7236";

export type PatchApiUsedBooksIdBody = {
  ImageFile?: Blob;
  Price?: number;
};

export type PostApiUsedBooksBody = {
  Authors?: string[];
  BookName?: string;
  BookStatus?: string;
  CategoryId?: number;
  CategoryName?: string;
  Description?: string;
  Id?: number;
  ImageFile?: Blob;
  ISBN?: string;
  IsDeleted?: boolean;
  MemberEmail?: string;
  MemberId?: number;
  Picture?: string;
  Price?: number;
  ProductStatus?: boolean;
  PublishDate?: string;
  PublisherName?: string;
  ReleaseDate?: string;
};

export interface WeatherForecast {
  date?: string;
  summary?: string | null;
  temperatureC?: number;
  readonly temperatureF?: number;
}

export interface UsedBookDto {
  authors?: string[] | null;
  bookStatus?: string | null;
  categoryId?: number;
  description?: string | null;
  id?: number;
  identifier?: string | null;
  imageFile?: Blob | null;
  isDeleted?: boolean;
  kind?: string | null;
  memberEmail?: string | null;
  memberId?: number;
  picture?: string | null;
  price?: number;
  productStatus?: boolean;
  publishedDate?: string | null;
  publisher?: string | null;
  releaseDate?: string;
  title?: string | null;
}



type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



export const getApiUsedBooksIsbnIsbn = (
    isbn: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsedBookDto>> => {
    
    return axios.get(
      `/api/UsedBooks/isbn/${isbn}`,options
    );
  }


export const getGetApiUsedBooksIsbnIsbnQueryKey = (isbn: string,) => {
    return [`/api/UsedBooks/isbn/${isbn}`] as const;
    }

    
export const getGetApiUsedBooksIsbnIsbnQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>, TError = AxiosError<unknown>>(isbn: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsedBooksIsbnIsbnQueryKey(isbn);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>> = ({ signal }) => getApiUsedBooksIsbnIsbn(isbn, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(isbn), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsedBooksIsbnIsbnQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>>
export type GetApiUsedBooksIsbnIsbnQueryError = AxiosError<unknown>

export const useGetApiUsedBooksIsbnIsbn = <TData = Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>, TError = AxiosError<unknown>>(
 isbn: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiUsedBooksIsbnIsbnQueryOptions(isbn,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiUsedBooksUserIdUserId = (
    userId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsedBookDto[]>> => {
    
    return axios.get(
      `/api/UsedBooks/userId/${userId}`,options
    );
  }


export const getGetApiUsedBooksUserIdUserIdQueryKey = (userId: number,) => {
    return [`/api/UsedBooks/userId/${userId}`] as const;
    }

    
export const getGetApiUsedBooksUserIdUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>, TError = AxiosError<unknown>>(userId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsedBooksUserIdUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>> = ({ signal }) => getApiUsedBooksUserIdUserId(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsedBooksUserIdUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>>
export type GetApiUsedBooksUserIdUserIdQueryError = AxiosError<unknown>

export const useGetApiUsedBooksUserIdUserId = <TData = Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>, TError = AxiosError<unknown>>(
 userId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiUsedBooksUserIdUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiUsedBooks = (
    postApiUsedBooksBody: PostApiUsedBooksBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {const formData = new FormData();
if(postApiUsedBooksBody.Id !== undefined) {
 formData.append('Id', postApiUsedBooksBody.Id.toString())
 }
if(postApiUsedBooksBody.MemberId !== undefined) {
 formData.append('MemberId', postApiUsedBooksBody.MemberId.toString())
 }
if(postApiUsedBooksBody.BookName !== undefined) {
 formData.append('BookName', postApiUsedBooksBody.BookName)
 }
if(postApiUsedBooksBody.CategoryId !== undefined) {
 formData.append('CategoryId', postApiUsedBooksBody.CategoryId.toString())
 }
if(postApiUsedBooksBody.Authors !== undefined) {
 postApiUsedBooksBody.Authors.forEach(value => formData.append('Authors', value));
 }
if(postApiUsedBooksBody.PublisherName !== undefined) {
 formData.append('PublisherName', postApiUsedBooksBody.PublisherName)
 }
if(postApiUsedBooksBody.PublishDate !== undefined) {
 formData.append('PublishDate', postApiUsedBooksBody.PublishDate)
 }
if(postApiUsedBooksBody.ProductStatus !== undefined) {
 formData.append('ProductStatus', postApiUsedBooksBody.ProductStatus.toString())
 }
if(postApiUsedBooksBody.Price !== undefined) {
 formData.append('Price', postApiUsedBooksBody.Price.toString())
 }
if(postApiUsedBooksBody.Description !== undefined) {
 formData.append('Description', postApiUsedBooksBody.Description)
 }
if(postApiUsedBooksBody.ISBN !== undefined) {
 formData.append('ISBN', postApiUsedBooksBody.ISBN)
 }
if(postApiUsedBooksBody.Picture !== undefined) {
 formData.append('Picture', postApiUsedBooksBody.Picture)
 }
if(postApiUsedBooksBody.ImageFile !== undefined) {
 formData.append('ImageFile', postApiUsedBooksBody.ImageFile)
 }
if(postApiUsedBooksBody.BookStatus !== undefined) {
 formData.append('BookStatus', postApiUsedBooksBody.BookStatus)
 }
if(postApiUsedBooksBody.MemberEmail !== undefined) {
 formData.append('MemberEmail', postApiUsedBooksBody.MemberEmail)
 }
if(postApiUsedBooksBody.CategoryName !== undefined) {
 formData.append('CategoryName', postApiUsedBooksBody.CategoryName)
 }
if(postApiUsedBooksBody.ReleaseDate !== undefined) {
 formData.append('ReleaseDate', postApiUsedBooksBody.ReleaseDate)
 }
if(postApiUsedBooksBody.IsDeleted !== undefined) {
 formData.append('IsDeleted', postApiUsedBooksBody.IsDeleted.toString())
 }

    
    return axios.post(
      `/api/UsedBooks`,
      formData,options
    );
  }



export const getPostApiUsedBooksMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsedBooks>>, TError,{data: PostApiUsedBooksBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiUsedBooks>>, TError,{data: PostApiUsedBooksBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUsedBooks>>, {data: PostApiUsedBooksBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiUsedBooks(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiUsedBooksMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsedBooks>>>
    export type PostApiUsedBooksMutationBody = PostApiUsedBooksBody
    export type PostApiUsedBooksMutationError = AxiosError<unknown>

    export const usePostApiUsedBooks = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsedBooks>>, TError,{data: PostApiUsedBooksBody}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPostApiUsedBooksMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const patchApiUsedBooksId = (
    id: number,
    patchApiUsedBooksIdBody: PatchApiUsedBooksIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {const formData = new FormData();
if(patchApiUsedBooksIdBody.Price !== undefined) {
 formData.append('Price', patchApiUsedBooksIdBody.Price.toString())
 }
if(patchApiUsedBooksIdBody.ImageFile !== undefined) {
 formData.append('ImageFile', patchApiUsedBooksIdBody.ImageFile)
 }

    
    return axios.patch(
      `/api/UsedBooks/${id}`,
      formData,options
    );
  }



export const getPatchApiUsedBooksIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsedBooksId>>, TError,{id: number;data: PatchApiUsedBooksIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiUsedBooksId>>, TError,{id: number;data: PatchApiUsedBooksIdBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiUsedBooksId>>, {id: number;data: PatchApiUsedBooksIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiUsedBooksId(id,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PatchApiUsedBooksIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiUsedBooksId>>>
    export type PatchApiUsedBooksIdMutationBody = PatchApiUsedBooksIdBody
    export type PatchApiUsedBooksIdMutationError = AxiosError<unknown>

    export const usePatchApiUsedBooksId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsedBooksId>>, TError,{id: number;data: PatchApiUsedBooksIdBody}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPatchApiUsedBooksIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiUsedBooksId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/UsedBooks/${id}`,options
    );
  }



export const getDeleteApiUsedBooksIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsedBooksId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsedBooksId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUsedBooksId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiUsedBooksId(id,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUsedBooksIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUsedBooksId>>>
    
    export type DeleteApiUsedBooksIdMutationError = AxiosError<unknown>

    export const useDeleteApiUsedBooksId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsedBooksId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getDeleteApiUsedBooksIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getWeatherForecast = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WeatherForecast[]>> => {
    
    return axios.get(
      `/WeatherForecast`,options
    );
  }


export const getGetWeatherForecastQueryKey = () => {
    return [`/WeatherForecast`] as const;
    }

    
export const getGetWeatherForecastQueryOptions = <TData = Awaited<ReturnType<typeof getWeatherForecast>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWeatherForecastQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeatherForecast>>> = ({ signal }) => getWeatherForecast({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWeatherForecastQueryResult = NonNullable<Awaited<ReturnType<typeof getWeatherForecast>>>
export type GetWeatherForecastQueryError = AxiosError<unknown>

export const useGetWeatherForecast = <TData = Awaited<ReturnType<typeof getWeatherForecast>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetWeatherForecastQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




